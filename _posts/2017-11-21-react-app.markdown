---
layout: post
title: "Creating Production-Ready React and Redux Apps"
description: "Let's create a React and Redux application that is production-ready. We will rely on best-practices and address security from the beginning to achieve this."
date: 2017-11-21 09:48
category: Technical Guide, React
author:
  name: "Bruno Krebs"
  url: "https://twitter.com/brunoskrebs"
  mail: "bruno.krebs@auth0.com"
  avatar: "https://www.gravatar.com/avatar/76ea40cbf67675babe924eecf167b9b8?s=60"
design:
  bg_color: "#1B1C20"
  image: https://cdn.auth0.com/blog/spring5-embedded/logo-spring-tomcat-gradle.png
tags:
- react
- redux
- eslint
- editorconfig
- javascript
- auth0
- real-world
related:
- 2017-08-10-implementing-jwt-authentication-on-spring-boot
---

**TL;DR:** In this article, we are going to start creating a production-ready React and Redux application. We will begin by installing basic tools and setting up a solid foundation to develop scalable Single Page Applications (SPAs). We will take into account best practices and configure development tools like ESLint and EditorConfig. We will also configure [Auth0 as the identity manager of our application](https://auth0.com/user-management) to support state-of-the-art features, like [Social Login](https://auth0.com/learn/social-login/) and [Multifactor Authentication](https://auth0.com/learn/multifactor-authentication/). We can find the code produced throughout this article in [this GitHub Pull Request](https://github.com/auth0-blog/real-world-react-redux/pull/1).

## Why React and Redux

I'll be brief about this topic for _three_ reasons. One, both [React](https://github.com/facebook/react) and [Redux](https://github.com/reactjs/redux) are consolidated JavaScript libraries that are supported by huge, thriving communities. Second, there are many articles ([like this one](https://www.madetech.com/blog/the-pros-and-cons-of-react-plus-redux)) that talks about the advantages and disadvantages of using them. Third, the idea is to focus on creating production-ready applications with React and Redux rather than discussing pros and cons.

Nevertheless, a few words about both libraries sounds like a good idea. Let's begin with React. [React, originally developed by Jordan Walke and Denis Popov, was released on March 2013](https://en.wikipedia.org/wiki/React_\(JavaScript_library\)#History). Its main goal is to provide developers a platform where they can express applications through composable components. Usually, developers rely on the [JSX pseudo-language, preprocessor](https://reactjs.org/docs/jsx-in-depth.html) to create these components. We will see these concepts in action, but previous knowledge would be valuable.

Redux is a predictable state container that helps developers managing data in JavaScript applications. This library is based on simple, easy to learn concepts and techniques. Basically, there is a central _storage facility_ that is only updated through `actions` dispatched to `reducers`. [Check out this practical tutorial to learn Redux through simple examples](https://auth0.com/blog/redux-in-action).

## A Word About IDEs

Before moving onto the practical sections of this article, let's talk about IDEs (Integrated Development Environments). Professionals that create reliable applications, frequently equip themselves with tools that help them avoid mistakes. On program errors that will eventually occur, these tools must enable developers to fight and debug these errors. With this in mind, and considering that [only Visual Studio Code and WebStorm](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#debugging-in-the-editor) are capable of connecting to browsers to debug React apps, it is highly advised to choose one of these IDEs.

After choosing and installing a IDE, please, refer to [this document to properly tie up debugging in this editor](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#debugging-in-the-editor). It is a valuable asset.

As it's possible to see in the following screenshot, this feature works perfectly on WebStorm.

![Debugging React and Redux applications on WebStorm](https://cdn.auth0.com/blog/react-redux-app/debugging-with-webstorm.png)

## Creating the Project

[Good resource about `create-react-app`](https://github.com/facebookincubator/create-react-app/tree/master/packages/react-scripts/template). [The `create-react-app` website](https://github.com/facebookincubator/create-react-app).

```bash
npm install -g create-react-app

create-react-app personal-finance

cd personal-finance
```

### Keeping Code Style Consistent with EditorConfig

More often than not, more than one developer will support and submit updates to a particular React application. When this time comes, it will be nice to have some mechanism that helps keeping the code style consistent throughout the multiple files and commits. This is exactly the goal of [EditorConfig](http://editorconfig.org/). Only by creating a single file with a small number of properties, we can help developers to be more productive by not thinking too much about code styling. We delegate this responsibility to the IDE through a plugin. Fortunately, [both Visual Studio Code and WebStorm](http://editorconfig.org/#download) already ship with these plugins pre-installed.

In our application, we will copy the contents of the `.editorconfig` file available on [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript#airbnb-javascript-style-guide-). This is a great resource when it comes to best practices as these style guides are heavily used by the community.

In the root directory of our app, let's create a new file called `.editorconfig` and add to it the following properties:

```editorconfig
root = true

[*]
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf
# editorconfig-tools is unable to ignore longs strings or urls
max_line_length = null
```

That's it. We don't need anything else if we are using Visual Studio Code or WebStorm.

### ESLint

Explain ESLint and why use it.

```bash
# tell reader to install an ESLint plugin
touch .eslintrc
echo '{
  "extends": "react-app"
}' > .eslintrc
```
